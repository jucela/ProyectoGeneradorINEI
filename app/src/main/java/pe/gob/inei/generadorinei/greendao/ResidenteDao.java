package pe.gob.inei.generadorinei.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.os.Environment;

import java.util.ArrayList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "RESIDENTE".
 */
public class ResidenteDao extends AbstractDao<Residente_g, Long> {

    public static final String TABLENAME = "RESIDENTE";

    /**
     * Properties of entity Residente_g.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_vivienda = new Property(1, String.class, "id_vivienda", false, "ID_VIVIENDA");
        public final static Property Numero_hogar = new Property(2, String.class, "numero_hogar", false, "NUMERO_HOGAR");
        public final static Property Numero_residente = new Property(3, String.class, "numero_residente", false, "NUMERO_RESIDENTE");
        public final static Property Numero_informante = new Property(4, String.class, "numero_informante", false, "NUMERO_INFORMANTE");
        public final static Property C2_p202 = new Property(5, String.class, "c2_p202", false, "C2_P202");
        public final static Property C2_p203 = new Property(6, String.class, "c2_p203", false, "C2_P203");
        public final static Property C2_p204 = new Property(7, String.class, "c2_p204", false, "C2_P204");
        public final static Property C2_p205_a = new Property(8, String.class, "c2_p205_a", false, "C2_P205_A");
        public final static Property C2_p205_m = new Property(9, String.class, "c2_p205_m", false, "C2_P205_M");
        public final static Property C2_p206 = new Property(10, String.class, "c2_p206", false, "C2_P206");
        public final static Property C2_p207 = new Property(11, String.class, "c2_p207", false, "C2_P207");
        public final static Property Cobertura = new Property(12, String.class, "cobertura", false, "COBERTURA");
    }


    public ResidenteDao(DaoConfig config) {
        super(config);
    }

    public ResidenteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESIDENTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_VIVIENDA\" TEXT," + // 1: id_vivienda
                "\"NUMERO_HOGAR\" TEXT," + // 2: numero_hogar
                "\"NUMERO_RESIDENTE\" TEXT," + // 3: numero_residente
                "\"NUMERO_INFORMANTE\" TEXT," + // 4: numero_informante
                "\"C2_P202\" TEXT," + // 5: c2_p202
                "\"C2_P203\" TEXT," + // 6: c2_p203
                "\"C2_P204\" TEXT," + // 7: c2_p204
                "\"C2_P205_A\" TEXT," + // 8: c2_p205_a
                "\"C2_P205_M\" TEXT," + // 9: c2_p205_m
                "\"C2_P206\" TEXT," + // 10: c2_p206
                "\"C2_P207\" TEXT," + // 11: c2_p207
                "\"COBERTURA\" TEXT," +
                "Unique (ID_VIVIENDA,NUMERO_HOGAR,NUMERO_RESIDENTE));"); // 12: cobertura
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESIDENTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Residente_g entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String id_vivienda = entity.getId_vivienda();
        if (id_vivienda != null) {
            stmt.bindString(2, id_vivienda);
        }

        String numero_hogar = entity.getNumero_hogar();
        if (numero_hogar != null) {
            stmt.bindString(3, numero_hogar);
        }

        String numero_residente = entity.getNumero_residente();
        if (numero_residente != null) {
            stmt.bindString(4, numero_residente);
        }

        String numero_informante = entity.getNumero_informante();
        if (numero_informante != null) {
            stmt.bindString(5, numero_informante);
        }

        String c2_p202 = entity.getC2_p202();
        if (c2_p202 != null) {
            stmt.bindString(6, c2_p202);
        }

        String c2_p203 = entity.getC2_p203();
        if (c2_p203 != null) {
            stmt.bindString(7, c2_p203);
        }

        String c2_p204 = entity.getC2_p204();
        if (c2_p204 != null) {
            stmt.bindString(8, c2_p204);
        }

        String c2_p205_a = entity.getC2_p205_a();
        if (c2_p205_a != null) {
            stmt.bindString(9, c2_p205_a);
        }

        String c2_p205_m = entity.getC2_p205_m();
        if (c2_p205_m != null) {
            stmt.bindString(10, c2_p205_m);
        }

        String c2_p206 = entity.getC2_p206();
        if (c2_p206 != null) {
            stmt.bindString(11, c2_p206);
        }

        String c2_p207 = entity.getC2_p207();
        if (c2_p207 != null) {
            stmt.bindString(12, c2_p207);
        }

        String cobertura = entity.getCobertura();
        if (cobertura != null) {
            stmt.bindString(13, cobertura);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Residente_g entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String id_vivienda = entity.getId_vivienda();
        if (id_vivienda != null) {
            stmt.bindString(2, id_vivienda);
        }

        String numero_hogar = entity.getNumero_hogar();
        if (numero_hogar != null) {
            stmt.bindString(3, numero_hogar);
        }

        String numero_residente = entity.getNumero_residente();
        if (numero_residente != null) {
            stmt.bindString(4, numero_residente);
        }

        String numero_informante = entity.getNumero_informante();
        if (numero_informante != null) {
            stmt.bindString(5, numero_informante);
        }

        String c2_p202 = entity.getC2_p202();
        if (c2_p202 != null) {
            stmt.bindString(6, c2_p202);
        }

        String c2_p203 = entity.getC2_p203();
        if (c2_p203 != null) {
            stmt.bindString(7, c2_p203);
        }

        String c2_p204 = entity.getC2_p204();
        if (c2_p204 != null) {
            stmt.bindString(8, c2_p204);
        }

        String c2_p205_a = entity.getC2_p205_a();
        if (c2_p205_a != null) {
            stmt.bindString(9, c2_p205_a);
        }

        String c2_p205_m = entity.getC2_p205_m();
        if (c2_p205_m != null) {
            stmt.bindString(10, c2_p205_m);
        }

        String c2_p206 = entity.getC2_p206();
        if (c2_p206 != null) {
            stmt.bindString(11, c2_p206);
        }

        String c2_p207 = entity.getC2_p207();
        if (c2_p207 != null) {
            stmt.bindString(12, c2_p207);
        }

        String cobertura = entity.getCobertura();
        if (cobertura != null) {
            stmt.bindString(13, cobertura);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Residente_g readEntity(Cursor cursor, int offset) {
        Residente_g entity = new Residente_g( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id_vivienda
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // numero_hogar
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // numero_residente
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // numero_informante
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // c2_p202
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // c2_p203
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // c2_p204
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // c2_p205_a
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // c2_p205_m
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // c2_p206
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // c2_p207
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // cobertura
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Residente_g entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_vivienda(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNumero_hogar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNumero_residente(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNumero_informante(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setC2_p202(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setC2_p203(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setC2_p204(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setC2_p205_a(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setC2_p205_m(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setC2_p206(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setC2_p207(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCobertura(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
    }

    @Override
    protected final Long updateKeyAfterInsert(Residente_g entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Residente_g entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Residente_g entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    SQLiteDatabase sqLiteDatabase;

    public int getId(String id_vivienda, String numero_hogar, String numero_residente){
        int _id = -1;
        String[] whereArgs = new String[]{id_vivienda,numero_hogar,numero_residente};
        Cursor cursor = null;
        open();
        try{
            cursor = sqLiteDatabase.query(TABLENAME, null,"id_vivienda=? and numero_hogar=? and numero_residente=?",whereArgs,null,null,null);
            if(cursor.getCount() == 1){
                cursor.moveToFirst();
                _id = Integer.parseInt(cursor.getString(cursor.getColumnIndex("_id")));
            }
        }finally{
            if(cursor != null) cursor.close();
        }
        close();
        return _id;
    }

    public Residente_g getResidente(String id_vivienda, String numero_hogar, String numero_residente){
        String[] whereArgs = new String[]{id_vivienda,numero_hogar,numero_residente};
        Cursor cursor = null;

        Properties properties = new Properties();

        Residente_g residente = new Residente_g();

        open();

        try{
            cursor = sqLiteDatabase.query(TABLENAME, null,"id_vivienda=? and numero_hogar=? and numero_residente=?",whereArgs,null,null,null);

            if(cursor.getCount() == 1){
                cursor.moveToNext();
                residente = new Residente_g();
                residente.setId(Long.valueOf(Integer.parseInt(cursor.getString(cursor.getColumnIndex(properties.Id.columnName)))));
                residente.setId_vivienda(cursor.getString(cursor.getColumnIndex(properties.Id_vivienda.columnName)));
                residente.setNumero_hogar(cursor.getString(cursor.getColumnIndex(properties.Numero_hogar.columnName)));
                residente.setNumero_residente(cursor.getString(cursor.getColumnIndex(properties.Numero_residente.columnName)));
                residente.setNumero_informante(cursor.getString(cursor.getColumnIndex(properties.Numero_informante.columnName)));
                residente.setC2_p202(cursor.getString(cursor.getColumnIndex(properties.C2_p202.columnName)));
                residente.setC2_p203(cursor.getString(cursor.getColumnIndex(properties.C2_p203.columnName)));
                residente.setC2_p204(cursor.getString(cursor.getColumnIndex(properties.C2_p204.columnName)));
                residente.setC2_p205_a(cursor.getString(cursor.getColumnIndex(properties.C2_p205_a.columnName)));
                residente.setC2_p205_m(cursor.getString(cursor.getColumnIndex(properties.C2_p205_m.columnName)));
                residente.setC2_p206(cursor.getString(cursor.getColumnIndex(properties.C2_p206.columnName)));
                residente.setC2_p207(cursor.getString(cursor.getColumnIndex(properties.C2_p207.columnName)));
                residente.setCobertura(cursor.getString(cursor.getColumnIndex(properties.Cobertura.columnName)));
            }
        }finally{
            if(cursor != null) cursor.close();
        }

        close();
        return residente;
    }

    public ArrayList<Residente_g> getResidentes(String id_vivienda, String numero_hogar){
        String[] whereArgs = new String[]{id_vivienda,numero_hogar};
        Cursor cursor = null;

        Properties properties = new Properties();

        ArrayList<Residente_g> residentes = new ArrayList<Residente_g>();

        open();

        try{
            cursor = sqLiteDatabase.query(TABLENAME, null,"id_vivienda=? and numero_hogar=?",whereArgs,null,null,null);

            while(cursor.moveToNext()){
                Residente_g residente = new Residente_g();
                residente.setId(Long.valueOf(Integer.parseInt(cursor.getString(cursor.getColumnIndex(properties.Id.columnName)))));
                residente.setId_vivienda(cursor.getString(cursor.getColumnIndex(properties.Id_vivienda.columnName)));
                residente.setNumero_hogar(cursor.getString(cursor.getColumnIndex(properties.Numero_hogar.columnName)));
                residente.setNumero_residente(cursor.getString(cursor.getColumnIndex(properties.Numero_residente.columnName)));
                residente.setNumero_informante(cursor.getString(cursor.getColumnIndex(properties.Numero_informante.columnName)));
                residente.setC2_p202(cursor.getString(cursor.getColumnIndex(properties.C2_p202.columnName)));
                residente.setC2_p203(cursor.getString(cursor.getColumnIndex(properties.C2_p203.columnName)));
                residente.setC2_p204(cursor.getString(cursor.getColumnIndex(properties.C2_p204.columnName)));
                residente.setC2_p205_a(cursor.getString(cursor.getColumnIndex(properties.C2_p205_a.columnName)));
                residente.setC2_p205_m(cursor.getString(cursor.getColumnIndex(properties.C2_p205_m.columnName)));
                residente.setC2_p206(cursor.getString(cursor.getColumnIndex(properties.C2_p206.columnName)));
                residente.setC2_p207(cursor.getString(cursor.getColumnIndex(properties.C2_p207.columnName)));
                residente.setCobertura(cursor.getString(cursor.getColumnIndex(properties.Cobertura.columnName)));
                residentes.add(residente);
            }
        }finally{
            if(cursor != null) cursor.close();
        }

        close();
        return residentes;
    }

    public void open() throws SQLException {
        String myPath = Environment.getExternalStorageDirectory()+"/GreenDao/encuesta-db";
        sqLiteDatabase = SQLiteDatabase.openDatabase(myPath,null,SQLiteDatabase.OPEN_READWRITE);
    }

    public synchronized void close(){
        if(sqLiteDatabase != null){
            sqLiteDatabase.close();
        }
    }
}
