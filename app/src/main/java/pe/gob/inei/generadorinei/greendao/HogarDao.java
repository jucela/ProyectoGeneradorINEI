package pe.gob.inei.generadorinei.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.os.Environment;

import java.util.ArrayList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "HOGAR".
 */
public class HogarDao extends AbstractDao<Hogar_g, Long> {

    public static final String TABLENAME = "HOGAR";

    /**
     * Properties of entity Hogar_g.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_vivienda = new Property(1, String.class, "id_vivienda", false, "ID_VIVIENDA");
        public final static Property Numero_hogar = new Property(2, String.class, "numero_hogar", false, "NUMERO_HOGAR");
        public final static Property Nom_ape = new Property(3, String.class, "nom_ape", false, "NOM_APE");
        public final static Property Estado = new Property(4, String.class, "estado", false, "ESTADO");
        public final static Property Nropersonas = new Property(5, String.class, "nropersonas", false, "NROPERSONAS");
        public final static Property Vive = new Property(6, String.class, "vive", false, "VIVE");
        public final static Property Nroviven = new Property(7, String.class, "nroviven", false, "NROVIVEN");
        public final static Property Principal = new Property(8, String.class, "principal", false, "PRINCIPAL");
        public final static Property Cobertura = new Property(9, String.class, "cobertura", false, "COBERTURA");
    }


    public HogarDao(DaoConfig config) {
        super(config);
    }

    public HogarDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOGAR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_VIVIENDA\" TEXT," + // 1: id_vivienda
                "\"NUMERO_HOGAR\" TEXT," + // 2: numero_hogar
                "\"NOM_APE\" TEXT," + // 3: nom_ape
                "\"ESTADO\" TEXT," + // 4: estado
                "\"NROPERSONAS\" TEXT," + // 5: nropersonas
                "\"VIVE\" TEXT," + // 6: vive
                "\"NROVIVEN\" TEXT," + // 7: nroviven
                "\"PRINCIPAL\" TEXT," + // 8: principal
                "\"COBERTURA\" TEXT," +
                "Unique (ID_VIVIENDA,NUMERO_HOGAR));"); // 9: cobertura
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOGAR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Hogar_g entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String id_vivienda = entity.getId_vivienda();
        if (id_vivienda != null) {
            stmt.bindString(2, id_vivienda);
        }

        String numero_hogar = entity.getNumero_hogar();
        if (numero_hogar != null) {
            stmt.bindString(3, numero_hogar);
        }

        String nom_ape = entity.getNom_ape();
        if (nom_ape != null) {
            stmt.bindString(4, nom_ape);
        }

        String estado = entity.getEstado();
        if (estado != null) {
            stmt.bindString(5, estado);
        }

        String nropersonas = entity.getNropersonas();
        if (nropersonas != null) {
            stmt.bindString(6, nropersonas);
        }

        String vive = entity.getVive();
        if (vive != null) {
            stmt.bindString(7, vive);
        }

        String nroviven = entity.getNroviven();
        if (nroviven != null) {
            stmt.bindString(8, nroviven);
        }

        String principal = entity.getPrincipal();
        if (principal != null) {
            stmt.bindString(9, principal);
        }

        String cobertura = entity.getCobertura();
        if (cobertura != null) {
            stmt.bindString(10, cobertura);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Hogar_g entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String id_vivienda = entity.getId_vivienda();
        if (id_vivienda != null) {
            stmt.bindString(2, id_vivienda);
        }

        String numero_hogar = entity.getNumero_hogar();
        if (numero_hogar != null) {
            stmt.bindString(3, numero_hogar);
        }

        String nom_ape = entity.getNom_ape();
        if (nom_ape != null) {
            stmt.bindString(4, nom_ape);
        }

        String estado = entity.getEstado();
        if (estado != null) {
            stmt.bindString(5, estado);
        }

        String nropersonas = entity.getNropersonas();
        if (nropersonas != null) {
            stmt.bindString(6, nropersonas);
        }

        String vive = entity.getVive();
        if (vive != null) {
            stmt.bindString(7, vive);
        }

        String nroviven = entity.getNroviven();
        if (nroviven != null) {
            stmt.bindString(8, nroviven);
        }

        String principal = entity.getPrincipal();
        if (principal != null) {
            stmt.bindString(9, principal);
        }

        String cobertura = entity.getCobertura();
        if (cobertura != null) {
            stmt.bindString(10, cobertura);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Hogar_g readEntity(Cursor cursor, int offset) {
        Hogar_g entity = new Hogar_g( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id_vivienda
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // numero_hogar
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nom_ape
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // estado
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nropersonas
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // vive
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nroviven
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // principal
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // cobertura
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Hogar_g entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_vivienda(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNumero_hogar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNom_ape(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEstado(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNropersonas(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVive(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNroviven(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPrincipal(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCobertura(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
    }

    @Override
    protected final Long updateKeyAfterInsert(Hogar_g entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Hogar_g entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Hogar_g entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    SQLiteDatabase sqLiteDatabase;

    public int getId(String id_vivienda, String numero_hogar){
        int _id = -1;
        String[] whereArgs = new String[]{id_vivienda,numero_hogar};
        Cursor cursor = null;
        open();
        try{
            cursor = sqLiteDatabase.query(TABLENAME, null,"id_vivienda=? and numero_hogar=?",whereArgs,null,null,null);
            if(cursor.getCount() == 1){
                cursor.moveToFirst();
                _id = Integer.parseInt(cursor.getString(cursor.getColumnIndex("_id")));
            }
        }finally{
            if(cursor != null) cursor.close();
        }
        close();
        return _id;
    }

    public Hogar_g getHogar(String id_vivienda, String numero_hogar){
        String[] whereArgs = new String[]{id_vivienda,numero_hogar};
        Cursor cursor = null;

        Properties properties = new Properties();

        Hogar_g hogar = new Hogar_g();

        open();

        try{
            cursor = sqLiteDatabase.query(TABLENAME, null,"id_vivienda=? and numero_hogar=?",whereArgs,null,null,null);

            if(cursor.getCount() == 1){
                cursor.moveToNext();
                hogar = new Hogar_g();
                hogar.setId(Long.valueOf(Integer.parseInt(cursor.getString(cursor.getColumnIndex(properties.Id.columnName)))));
                hogar.setId_vivienda(cursor.getString(cursor.getColumnIndex(properties.Id_vivienda.columnName)));
                hogar.setNumero_hogar(cursor.getString(cursor.getColumnIndex(properties.Numero_hogar.columnName)));
                hogar.setNom_ape(cursor.getString(cursor.getColumnIndex(properties.Nom_ape.columnName)));
                hogar.setEstado(cursor.getString(cursor.getColumnIndex(properties.Estado.columnName)));
                hogar.setNropersonas(cursor.getString(cursor.getColumnIndex(properties.Nropersonas.columnName)));
                hogar.setVive(cursor.getString(cursor.getColumnIndex(properties.Vive.columnName)));
                hogar.setNroviven(cursor.getString(cursor.getColumnIndex(properties.Nroviven.columnName)));
                hogar.setPrincipal(cursor.getString(cursor.getColumnIndex(properties.Principal.columnName)));
                hogar.setCobertura(cursor.getString(cursor.getColumnIndex(properties.Cobertura.columnName)));
            }
        }finally{
            if(cursor != null) cursor.close();
        }

        close();
        return hogar;
    }

    public ArrayList<Hogar_g> getHogares(String id_vivienda){
        String[] whereArgs = new String[]{id_vivienda};
        Cursor cursor = null;

        Properties properties = new Properties();

        ArrayList<Hogar_g> hogares = new ArrayList<Hogar_g>();

        open();

        try{
            cursor = sqLiteDatabase.query(TABLENAME, null,"id_vivienda=?",whereArgs,null,null,null);

            while(cursor.moveToNext()){
                Hogar_g hogar = new Hogar_g();
                hogar.setId(Long.valueOf(Integer.parseInt(cursor.getString(cursor.getColumnIndex(properties.Id.columnName)))));
                hogar.setId_vivienda(cursor.getString(cursor.getColumnIndex(properties.Id_vivienda.columnName)));
                hogar.setNumero_hogar(cursor.getString(cursor.getColumnIndex(properties.Numero_hogar.columnName)));
                hogar.setNom_ape(cursor.getString(cursor.getColumnIndex(properties.Nom_ape.columnName)));
                hogar.setEstado(cursor.getString(cursor.getColumnIndex(properties.Estado.columnName)));
                hogar.setNropersonas(cursor.getString(cursor.getColumnIndex(properties.Nropersonas.columnName)));
                hogar.setVive(cursor.getString(cursor.getColumnIndex(properties.Vive.columnName)));
                hogar.setNroviven(cursor.getString(cursor.getColumnIndex(properties.Nroviven.columnName)));
                hogar.setPrincipal(cursor.getString(cursor.getColumnIndex(properties.Principal.columnName)));
                hogar.setCobertura(cursor.getString(cursor.getColumnIndex(properties.Cobertura.columnName)));
                hogares.add(hogar);
            }
        }finally{
            if(cursor != null) cursor.close();
        }

        close();
        return hogares;
    }

    public void open() throws SQLException {
        String myPath = Environment.getExternalStorageDirectory()+"/GreenDao/encuesta-db";
        sqLiteDatabase = SQLiteDatabase.openDatabase(myPath,null,SQLiteDatabase.OPEN_READWRITE);
    }

    public synchronized void close(){
        if(sqLiteDatabase != null){
            sqLiteDatabase.close();
        }
    }
}
