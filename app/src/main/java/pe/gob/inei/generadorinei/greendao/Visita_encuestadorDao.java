package pe.gob.inei.generadorinei.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.os.Environment;
import android.util.Log;

import java.util.ArrayList;

import java.util.ArrayList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VISITA_ENCUESTADOR".
*/
public class Visita_encuestadorDao extends AbstractDao<Visita_encuestador, Long> {

    public static final String TABLENAME = "VISITA_ENCUESTADOR";

    /**
     * Properties of entity Visita_encuestador.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_vivienda = new Property(1, String.class, "id_vivienda", false, "ID_VIVIENDA");
        public final static Property Numero_hogar = new Property(2, String.class, "numero_hogar", false, "NUMERO_HOGAR");
        public final static Property Numero_visita = new Property(3, String.class, "numero_visita", false, "NUMERO_VISITA");
        public final static Property Vis_fecha_dd = new Property(4, String.class, "vis_fecha_dd", false, "VIS_FECHA_DD");
        public final static Property Vis_fecha_mm = new Property(5, String.class, "vis_fecha_mm", false, "VIS_FECHA_MM");
        public final static Property Vis_fecha_aa = new Property(6, String.class, "vis_fecha_aa", false, "VIS_FECHA_AA");
        public final static Property Vis_hor_ini = new Property(7, String.class, "vis_hor_ini", false, "VIS_HOR_INI");
        public final static Property Vis_min_ini = new Property(8, String.class, "vis_min_ini", false, "VIS_MIN_INI");
        public final static Property Vis_hor_fin = new Property(9, String.class, "vis_hor_fin", false, "VIS_HOR_FIN");
        public final static Property Vis_min_fin = new Property(10, String.class, "vis_min_fin", false, "VIS_MIN_FIN");
        public final static Property Prox_vis_fecha_dd = new Property(11, String.class, "prox_vis_fecha_dd", false, "PROX_VIS_FECHA_DD");
        public final static Property Prox_vis_fecha_mm = new Property(12, String.class, "prox_vis_fecha_mm", false, "PROX_VIS_FECHA_MM");
        public final static Property Prox_vis_fecha_aa = new Property(13, String.class, "prox_vis_fecha_aa", false, "PROX_VIS_FECHA_AA");
        public final static Property Prox_vis_hor = new Property(14, String.class, "prox_vis_hor", false, "PROX_VIS_HOR");
        public final static Property Prox_vis_min = new Property(15, String.class, "prox_vis_min", false, "PROX_VIS_MIN");
        public final static Property Vis_resu = new Property(16, String.class, "vis_resu", false, "VIS_RESU");
        public final static Property Vis_resu_esp = new Property(17, String.class, "vis_resu_esp", false, "VIS_RESU_ESP");
    }


    public Visita_encuestadorDao(DaoConfig config) {
        super(config);
    }
    
    public Visita_encuestadorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VISITA_ENCUESTADOR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_VIVIENDA\" TEXT," + // 1: id_vivienda
                "\"NUMERO_HOGAR\" TEXT," + // 2: numero_hogar
                "\"NUMERO_VISITA\" TEXT," + // 3: numero_visita
                "\"VIS_FECHA_DD\" TEXT," + // 4: vis_fecha_dd
                "\"VIS_FECHA_MM\" TEXT," + // 5: vis_fecha_mm
                "\"VIS_FECHA_AA\" TEXT," + // 6: vis_fecha_aa
                "\"VIS_HOR_INI\" TEXT," + // 7: vis_hor_ini
                "\"VIS_MIN_INI\" TEXT," + // 8: vis_min_ini
                "\"VIS_HOR_FIN\" TEXT," + // 9: vis_hor_fin
                "\"VIS_MIN_FIN\" TEXT," + // 10: vis_min_fin
                "\"PROX_VIS_FECHA_DD\" TEXT," + // 11: prox_vis_fecha_dd
                "\"PROX_VIS_FECHA_MM\" TEXT," + // 12: prox_vis_fecha_mm
                "\"PROX_VIS_FECHA_AA\" TEXT," + // 13: prox_vis_fecha_aa
                "\"PROX_VIS_HOR\" TEXT," + // 14: prox_vis_hor
                "\"PROX_VIS_MIN\" TEXT," + // 15: prox_vis_min
                "\"VIS_RESU\" TEXT," + // 16: vis_resu
                "\"VIS_RESU_ESP\" TEXT," +
                "Unique (ID_VIVIENDA,NUMERO_HOGAR,NUMERO_VISITA));"); // 17: vis_resu_esp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VISITA_ENCUESTADOR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Visita_encuestador entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String id_vivienda = entity.getId_vivienda();
        if (id_vivienda != null) {
            stmt.bindString(2, id_vivienda);
        }
 
        String numero_hogar = entity.getNumero_hogar();
        if (numero_hogar != null) {
            stmt.bindString(3, numero_hogar);
        }
 
        String numero_visita = entity.getNumero_visita();
        if (numero_visita != null) {
            stmt.bindString(4, numero_visita);
        }
 
        String vis_fecha_dd = entity.getVis_fecha_dd();
        if (vis_fecha_dd != null) {
            stmt.bindString(5, vis_fecha_dd);
        }
 
        String vis_fecha_mm = entity.getVis_fecha_mm();
        if (vis_fecha_mm != null) {
            stmt.bindString(6, vis_fecha_mm);
        }
 
        String vis_fecha_aa = entity.getVis_fecha_aa();
        if (vis_fecha_aa != null) {
            stmt.bindString(7, vis_fecha_aa);
        }
 
        String vis_hor_ini = entity.getVis_hor_ini();
        if (vis_hor_ini != null) {
            stmt.bindString(8, vis_hor_ini);
        }
 
        String vis_min_ini = entity.getVis_min_ini();
        if (vis_min_ini != null) {
            stmt.bindString(9, vis_min_ini);
        }
 
        String vis_hor_fin = entity.getVis_hor_fin();
        if (vis_hor_fin != null) {
            stmt.bindString(10, vis_hor_fin);
        }
 
        String vis_min_fin = entity.getVis_min_fin();
        if (vis_min_fin != null) {
            stmt.bindString(11, vis_min_fin);
        }
 
        String prox_vis_fecha_dd = entity.getProx_vis_fecha_dd();
        if (prox_vis_fecha_dd != null) {
            stmt.bindString(12, prox_vis_fecha_dd);
        }
 
        String prox_vis_fecha_mm = entity.getProx_vis_fecha_mm();
        if (prox_vis_fecha_mm != null) {
            stmt.bindString(13, prox_vis_fecha_mm);
        }
 
        String prox_vis_fecha_aa = entity.getProx_vis_fecha_aa();
        if (prox_vis_fecha_aa != null) {
            stmt.bindString(14, prox_vis_fecha_aa);
        }
 
        String prox_vis_hor = entity.getProx_vis_hor();
        if (prox_vis_hor != null) {
            stmt.bindString(15, prox_vis_hor);
        }
 
        String prox_vis_min = entity.getProx_vis_min();
        if (prox_vis_min != null) {
            stmt.bindString(16, prox_vis_min);
        }
 
        String vis_resu = entity.getVis_resu();
        if (vis_resu != null) {
            stmt.bindString(17, vis_resu);
        }
 
        String vis_resu_esp = entity.getVis_resu_esp();
        if (vis_resu_esp != null) {
            stmt.bindString(18, vis_resu_esp);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Visita_encuestador entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String id_vivienda = entity.getId_vivienda();
        if (id_vivienda != null) {
            stmt.bindString(2, id_vivienda);
        }
 
        String numero_hogar = entity.getNumero_hogar();
        if (numero_hogar != null) {
            stmt.bindString(3, numero_hogar);
        }
 
        String numero_visita = entity.getNumero_visita();
        if (numero_visita != null) {
            stmt.bindString(4, numero_visita);
        }
 
        String vis_fecha_dd = entity.getVis_fecha_dd();
        if (vis_fecha_dd != null) {
            stmt.bindString(5, vis_fecha_dd);
        }
 
        String vis_fecha_mm = entity.getVis_fecha_mm();
        if (vis_fecha_mm != null) {
            stmt.bindString(6, vis_fecha_mm);
        }
 
        String vis_fecha_aa = entity.getVis_fecha_aa();
        if (vis_fecha_aa != null) {
            stmt.bindString(7, vis_fecha_aa);
        }
 
        String vis_hor_ini = entity.getVis_hor_ini();
        if (vis_hor_ini != null) {
            stmt.bindString(8, vis_hor_ini);
        }
 
        String vis_min_ini = entity.getVis_min_ini();
        if (vis_min_ini != null) {
            stmt.bindString(9, vis_min_ini);
        }
 
        String vis_hor_fin = entity.getVis_hor_fin();
        if (vis_hor_fin != null) {
            stmt.bindString(10, vis_hor_fin);
        }
 
        String vis_min_fin = entity.getVis_min_fin();
        if (vis_min_fin != null) {
            stmt.bindString(11, vis_min_fin);
        }
 
        String prox_vis_fecha_dd = entity.getProx_vis_fecha_dd();
        if (prox_vis_fecha_dd != null) {
            stmt.bindString(12, prox_vis_fecha_dd);
        }
 
        String prox_vis_fecha_mm = entity.getProx_vis_fecha_mm();
        if (prox_vis_fecha_mm != null) {
            stmt.bindString(13, prox_vis_fecha_mm);
        }
 
        String prox_vis_fecha_aa = entity.getProx_vis_fecha_aa();
        if (prox_vis_fecha_aa != null) {
            stmt.bindString(14, prox_vis_fecha_aa);
        }
 
        String prox_vis_hor = entity.getProx_vis_hor();
        if (prox_vis_hor != null) {
            stmt.bindString(15, prox_vis_hor);
        }
 
        String prox_vis_min = entity.getProx_vis_min();
        if (prox_vis_min != null) {
            stmt.bindString(16, prox_vis_min);
        }
 
        String vis_resu = entity.getVis_resu();
        if (vis_resu != null) {
            stmt.bindString(17, vis_resu);
        }
 
        String vis_resu_esp = entity.getVis_resu_esp();
        if (vis_resu_esp != null) {
            stmt.bindString(18, vis_resu_esp);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Visita_encuestador readEntity(Cursor cursor, int offset) {
        Visita_encuestador entity = new Visita_encuestador( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id_vivienda
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // numero_hogar
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // numero_visita
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // vis_fecha_dd
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // vis_fecha_mm
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // vis_fecha_aa
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // vis_hor_ini
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // vis_min_ini
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // vis_hor_fin
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // vis_min_fin
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // prox_vis_fecha_dd
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // prox_vis_fecha_mm
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // prox_vis_fecha_aa
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // prox_vis_hor
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // prox_vis_min
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // vis_resu
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // vis_resu_esp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Visita_encuestador entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_vivienda(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNumero_hogar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNumero_visita(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVis_fecha_dd(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVis_fecha_mm(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVis_fecha_aa(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVis_hor_ini(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVis_min_ini(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVis_hor_fin(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVis_min_fin(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProx_vis_fecha_dd(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setProx_vis_fecha_mm(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setProx_vis_fecha_aa(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setProx_vis_hor(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setProx_vis_min(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setVis_resu(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setVis_resu_esp(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Visita_encuestador entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Visita_encuestador entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Visita_encuestador entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    SQLiteDatabase sqLiteDatabase;

    public int getId(String id_vivienda, String numero_hogar, String numero_visita){
        int _id = -1;
        String[] whereArgs = new String[]{id_vivienda,numero_hogar,numero_visita};
        Cursor cursor = null;
        open();
        try{
            cursor = sqLiteDatabase.query(TABLENAME, null,"id_vivienda=? and numero_hogar=? and numero_visita=?",whereArgs,null,null,null);
            if(cursor.getCount() == 1){
                cursor.moveToFirst();
                _id = Integer.parseInt(cursor.getString(cursor.getColumnIndex("_id")));
            }
        }finally{
            if(cursor != null) cursor.close();
        }
        close();
        return _id;
    }

    public Visita_encuestador getVisita(String id_vivienda, String numero_hogar, String numero_visita){
        String[] whereArgs = new String[]{id_vivienda,numero_hogar,numero_visita};
        Cursor cursor = null;

        Properties properties = new Properties();

        Visita_encuestador visita = new Visita_encuestador();

        open();

        try{
            cursor = sqLiteDatabase.query(TABLENAME, null,"id_vivienda=? and numero_hogar=? and numero_visita=?",whereArgs,null,null,null);

            if(cursor.getCount() == 1){
                cursor.moveToNext();
                visita = new Visita_encuestador();
                visita.setId(Long.valueOf(Integer.parseInt(cursor.getString(cursor.getColumnIndex(properties.Id.columnName)))));
                visita.setId_vivienda(cursor.getString(cursor.getColumnIndex(properties.Id_vivienda.columnName)));
                visita.setNumero_hogar(cursor.getString(cursor.getColumnIndex(properties.Numero_hogar.columnName)));
                visita.setNumero_visita(cursor.getString(cursor.getColumnIndex(properties.Numero_visita.columnName)));
                visita.setVis_fecha_dd(cursor.getString(cursor.getColumnIndex(properties.Vis_fecha_dd.columnName)));
                visita.setVis_fecha_mm(cursor.getString(cursor.getColumnIndex(properties.Vis_fecha_mm.columnName)));
                visita.setVis_fecha_aa(cursor.getString(cursor.getColumnIndex(properties.Vis_fecha_aa.columnName)));
                visita.setVis_hor_ini(cursor.getString(cursor.getColumnIndex(properties.Vis_hor_ini.columnName)));
                visita.setVis_min_ini(cursor.getString(cursor.getColumnIndex(properties.Vis_min_ini.columnName)));
                visita.setVis_hor_fin(cursor.getString(cursor.getColumnIndex(properties.Vis_hor_fin.columnName)));
                visita.setVis_min_fin(cursor.getString(cursor.getColumnIndex(properties.Vis_min_fin.columnName)));
                visita.setProx_vis_fecha_dd(cursor.getString(cursor.getColumnIndex(properties.Prox_vis_fecha_dd.columnName)));
                visita.setProx_vis_fecha_mm(cursor.getString(cursor.getColumnIndex(properties.Prox_vis_fecha_mm.columnName)));
                visita.setProx_vis_fecha_aa(cursor.getString(cursor.getColumnIndex(properties.Prox_vis_fecha_aa.columnName)));
                visita.setProx_vis_hor(cursor.getString(cursor.getColumnIndex(properties.Prox_vis_hor.columnName)));
                visita.setProx_vis_min(cursor.getString(cursor.getColumnIndex(properties.Prox_vis_min.columnName)));
                visita.setVis_resu(cursor.getString(cursor.getColumnIndex(properties.Vis_resu.columnName)));
                visita.setVis_resu_esp(cursor.getString(cursor.getColumnIndex(properties.Vis_resu_esp.columnName)));
            }
        }finally{
            if(cursor != null) cursor.close();
        }

        close();
        return visita;
    }

    public ArrayList<Visita_encuestador> getVisitas(String id_vivienda, String numero_hogar){
        String[] whereArgs = new String[]{id_vivienda,numero_hogar};
        Cursor cursor = null;

        Properties properties = new Properties();

        ArrayList<Visita_encuestador> visitas = new ArrayList<Visita_encuestador>();

        open();

        Log.e("Visita_enc-id_vivienda",""+id_vivienda);
        Log.e("Visita_enc-numero_hogar",""+numero_hogar);

        try{
            cursor = sqLiteDatabase.query(TABLENAME, null,"id_vivienda=? and numero_hogar=?",whereArgs,null,null,null);

            Log.e("cursor.getCount()",""+cursor.getCount());

            while(cursor.moveToNext()){
                Visita_encuestador visita = new Visita_encuestador();
                visita.setId(Long.valueOf(Integer.parseInt(cursor.getString(cursor.getColumnIndex(properties.Id.columnName)))));
                visita.setId_vivienda(cursor.getString(cursor.getColumnIndex(properties.Id_vivienda.columnName)));
                visita.setNumero_hogar(cursor.getString(cursor.getColumnIndex(properties.Numero_hogar.columnName)));
                visita.setNumero_visita(cursor.getString(cursor.getColumnIndex(properties.Numero_visita.columnName)));
                visita.setVis_fecha_dd(cursor.getString(cursor.getColumnIndex(properties.Vis_fecha_dd.columnName)));
                visita.setVis_fecha_mm(cursor.getString(cursor.getColumnIndex(properties.Vis_fecha_mm.columnName)));
                visita.setVis_fecha_aa(cursor.getString(cursor.getColumnIndex(properties.Vis_fecha_aa.columnName)));
                visita.setVis_hor_ini(cursor.getString(cursor.getColumnIndex(properties.Vis_hor_ini.columnName)));
                visita.setVis_min_ini(cursor.getString(cursor.getColumnIndex(properties.Vis_min_ini.columnName)));
                visita.setVis_hor_fin(cursor.getString(cursor.getColumnIndex(properties.Vis_hor_fin.columnName)));
                visita.setVis_min_fin(cursor.getString(cursor.getColumnIndex(properties.Vis_min_fin.columnName)));
                visita.setProx_vis_fecha_dd(cursor.getString(cursor.getColumnIndex(properties.Prox_vis_fecha_dd.columnName)));
                visita.setProx_vis_fecha_mm(cursor.getString(cursor.getColumnIndex(properties.Prox_vis_fecha_mm.columnName)));
                visita.setProx_vis_fecha_aa(cursor.getString(cursor.getColumnIndex(properties.Prox_vis_fecha_aa.columnName)));
                visita.setProx_vis_hor(cursor.getString(cursor.getColumnIndex(properties.Prox_vis_hor.columnName)));
                visita.setProx_vis_min(cursor.getString(cursor.getColumnIndex(properties.Prox_vis_min.columnName)));
                visita.setVis_resu(cursor.getString(cursor.getColumnIndex(properties.Vis_resu.columnName)));
                visita.setVis_resu_esp(cursor.getString(cursor.getColumnIndex(properties.Vis_resu_esp.columnName)));
                visitas.add(visita);
            }
        }finally{
            if(cursor != null) cursor.close();
        }

        close();
        return visitas;
    }

    public void open() throws SQLException {
        String myPath = Environment.getExternalStorageDirectory()+"/GreenDao/encuesta-db";
        sqLiteDatabase = SQLiteDatabase.openDatabase(myPath,null,SQLiteDatabase.OPEN_READWRITE);
    }

    public synchronized void close(){
        if(sqLiteDatabase != null){
            sqLiteDatabase.close();
        }
    }
    
}
